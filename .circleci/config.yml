# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

orbs: 
   heroku: circleci/heroku@1.2.6
  # aws-ecr: circleci/aws-ecr@7.3.0
  # aws-ecs: circleci/aws-ecs@2.2.1

jobs:
   build-and-test:
     #These next lines define a Docker executor: https://circleci.com/docs/2.0/executor-types/
    # You can specify an image from Dockerhub or use one of our Convenience Images from CircleCI's Developer Hub.
    # Be sure to update the Docker image tag below to openjdk version of your application.
    # A list of available CircleCI Docker Convenience Images are available here: https://circleci.com/developer/images/image/cimg/openjdk
      docker:
        - image: cimg/openjdk:17.0
    # Add steps to the job
    # See: https://circleci.com/docs/2.0/configuration-reference/#steps
      steps:
      # Checkout the code as the first step.
       - checkout
      # Use mvn clean and package as the standard maven build phase
       - run:
           name: Build
           command: mvn -B -DskipTests clean package
      # Then run your tests!
       - run:
           name: Test
           command: mvn test
   deploy:
      machine: true
      steps:
        - checkout
        - run:
            name: Build and push Docker image to Heroku
            command: |
              sudo curl https://cli-assets.heroku.com/install.sh | sh
              HEROKU_API_KEY=${HEROKU_API_KEY} heroku container:login
              HEROKU_API_KEY=${HEROKU_API_KEY} heroku container:push -a python-django-starter web
              HEROKU_API_KEY=${HEROKU_API_KEY} heroku container:release -a python-django-starter web


# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/2.0/configuration-reference/#job
# Invoke jobs via workflows
# See: https://circleci.com/docs/2.0/configuration-reference/#workflows
workflows:
  heroku_deploy:
    jobs:
      - build-and-test
      - heroku/push-docker-image
      - heroku/push-docker-image
 #  build-and-push-image: 
   #  jobs:
   #   - build-and-test
    #  - aws-ecr/build-and-push-image:
   #        dockerfile: Dockerfile.jlink
      #     repo: ${MY_APP_PREFIX}
        #   tag: ${CIRCLE_SHA1}
          # filters:
           #  branches:
             #  only:
               #  - main
          # requires:
         #    - build-and-test
    #  - aws-ecs/deploy-service-update:
       #    cluster-name: '${MY_APP_PREFIX}-cluster'
         #  container-image-name-updates: 'container=${MY_APP_PREFIX},tag=${CIRCLE_SHA1}'
          # f amily: '${MY_APP_PREFIX}'
          # service-name: '${SERVICE_NAME}'
     #      force-new-deployment: true
      #     requires:
    #         - aws-ecr/build-and-push-image
     #      filters:
      #       branches:
     #          only:
     #            - main
