name: CI

on:
  pull_request:
  push:
    branches: main

env:
  # AWS_REGION: MY_AWS_REGION                   # set this to your preferred AWS region, e.g. us-west-1
  ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}         # set this to your Amazon ECR repository name
  #ECS_SERVICE: MY_ECS_SERVICE                 # set this to your Amazon ECS service name
  # ECS_CLUSTER: MY_ECS_CLUSTER                 # set this to your Amazon ECS cluster name
  # ECS_TASK_DEFINITION: MY_ECS_TASK_DEFINITION # set this to the path to your Amazon ECS task definition
  # file, e.g. .aws/task-definition.json
  CONTAINER_NAME: MY_CONTAINER_NAME           # set this to the name of the container in the
  # containerDefinitions section of your task definition

permissions:
  contents: read



jobs:
  run_tests:
    name: Run tests
    runs-on: ubuntu-latest



    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup java
        uses: actions/setup-java@v3
        with:
          java-version: 19
          distribution: 'adopt'
          architecture: x64


      - name: run tests
        id: run_tests
        run: |
          mvn clean install -Dquarkus.container-image.build=true -DskipITs=false   
          

  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: run_tests
    if: github.ref == 'refs/heads/main'
    environment: production

    steps:
      - name: Checkout
        uses: actions/checkout@v3


      - name: Setup java
        uses: actions/setup-java@v3
        with:
          java-version: 19
          distribution: 'adopt'
          architecture: x64


      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.
          
          mvn clean package  -Dquarkus.container-image.build=true  -Dquarkus.container-image.group=$ECR_REGISTRY  -Dquarkus.container-image.name=$ECR_REPOSITORY -Dquarkus.container-image.tag=$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
      - name: Download task definition
        run: |
          aws ecs describe-task-definition --task-definition checklist-new --query taskDefinition > task-definition.json

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: ${{ secrets.CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ secrets.ECS_SERVICE }}
          cluster: ${{ secrets.ECS_CLUSTER }}
          wait-for-service-stability: false
